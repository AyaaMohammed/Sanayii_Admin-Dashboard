@page
@model ChangePasswordModel
@{
    ViewData["Title"] = "Change password";
    ViewData["ActivePage"] = ManageNavPages.ChangePassword;
}
<style>
    body {
        background-color: #f8f9fa;
    }

    .card {
        border: none;
        border-radius: 10px;
        overflow: hidden;
    }

    .form-control {
        border-radius: 8px;
        padding: 12px;
        border: 1px solid #ced4da;
        transition: all 0.3s;
    }

        .form-control:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .form-floating label {
        padding: 0.8rem 1rem;
        color: #6c757d;
    }

    .btn-primary {
        background-color: #0d6efd;
        border: none;
        font-weight: 500;
        transition: all 0.3s;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
            transform: translateY(-2px);
        }

    .card-header {
        padding: 1.5rem;
    }

    .card-body {
        padding: 2rem;
    }

    /* Validation styles */
    .password-strength {
        height: 5px;
        margin-top: 5px;
        background: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
    }

    .password-strength-bar {
        height: 100%;
        width: 0;
        transition: width 0.3s ease, background-color 0.3s ease;
    }

    .validation-icon {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        display: none;
    }

    .was-validated .form-control:valid ~ .validation-icon.valid,
    .form-control.is-valid ~ .validation-icon.valid {
        display: block;
        color: #28a745;
    }

    .was-validated .form-control:invalid ~ .validation-icon.invalid,
    .form-control.is-invalid ~ .validation-icon.invalid {
        display: block;
        color: #dc3545;
    }

    .password-requirements {
        list-style-type: none;
        padding-left: 0;
        margin-top: 5px;
    }

        .password-requirements li {
            position: relative;
            padding-left: 25px;
            margin-bottom: 5px;
            font-size: 0.875rem;
        }

            .password-requirements li:before {
                content: "✗";
                position: absolute;
                left: 0;
                color: #dc3545;
            }

            .password-requirements li.valid:before {
                content: "✓";
                color: #28a745;
            }
</style>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">@ViewData["Title"]</h3>
                </div>
                <div class="card-body">
                    <partial name="_StatusMessage" for="StatusMessage" />

                    <form id="change-password-form" method="post" class="needs-validation" novalidate>
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="mb-4 position-relative">
                            <div class="form-floating">
                                <input asp-for="Input.OldPassword" class="form-control" autocomplete="current-password"
                                       aria-required="true" placeholder="Please enter your old password." />
                                <label asp-for="Input.OldPassword" class="form-label"></label>
                                <i class="bi bi-check-circle-fill validation-icon valid"></i>
                                <i class="bi bi-exclamation-circle-fill validation-icon invalid"></i>
                            </div>
                            <span asp-validation-for="Input.OldPassword" class="text-danger small"></span>
                        </div>

                        <div class="mb-4 position-relative">
                            <div class="form-floating">
                                <input asp-for="Input.NewPassword" class="form-control" autocomplete="new-password"
                                       aria-required="true" placeholder="Please enter your new password."
                                       pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$"
                                       oninput="checkPasswordStrength(this.value); validatePasswordRequirements(this.value)" />
                                <label asp-for="Input.NewPassword" class="form-label"></label>
                                <i class="bi bi-check-circle-fill validation-icon valid"></i>
                                <i class="bi bi-exclamation-circle-fill validation-icon invalid"></i>
                            </div>
                            <div class="password-strength mt-2">
                                <div class="password-strength-bar" id="password-strength-bar"></div>
                            </div>
                            <ul class="password-requirements" id="password-requirements">
                                <li id="req-length">At least 8 characters</li>
                                <li id="req-uppercase">At least 1 uppercase letter</li>
                                <li id="req-lowercase">At least 1 lowercase letter</li>
                                <li id="req-number">At least 1 number</li>
                                <li id="req-special">At least 1 special character</li>
                            </ul>
                            <span asp-validation-for="Input.NewPassword" class="text-danger small"></span>
                        </div>

                        <div class="mb-4 position-relative">
                            <div class="form-floating">
                                <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password"
                                       aria-required="true" placeholder="Please confirm your new password."
                                       oninput="checkPasswordMatch()" />
                                <label asp-for="Input.ConfirmPassword" class="form-label"></label>
                                <i class="bi bi-check-circle-fill validation-icon valid"></i>
                                <i class="bi bi-exclamation-circle-fill validation-icon invalid"></i>
                            </div>
                            <div class="invalid-feedback" id="confirm-password-feedback">
                                Passwords do not match
                            </div>
                            <span asp-validation-for="Input.ConfirmPassword" class="text-danger small"></span>
                        </div>

                        <button type="submit" class="w-100 btn btn-lg btn-primary rounded-pill py-2">
                            <i class="bi bi-key-fill me-2"></i>Update password
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Add Bootstrap validation classes
        (function () {
            'use strict'

            const forms = document.querySelectorAll('.needs-validation')

            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
        })()

        // Password strength indicator
        function checkPasswordStrength(password) {
            const strengthBar = document.getElementById('password-strength-bar');
            let strength = 0;

            // Check length
            if (password.length >= 8) strength += 20;
            if (password.length >= 12) strength += 10;

            // Check for uppercase letters
            if (/[A-Z]/.test(password)) strength += 20;

            // Check for lowercase letters
            if (/[a-z]/.test(password)) strength += 20;

            // Check for numbers
            if (/\d/.test(password)) strength += 20;

            // Check for special characters
            if (/[^A-Za-z0-9]/.test(password)) strength += 20;

            // Update the strength bar
            strengthBar.style.width = Math.min(strength, 100) + '%';

            // Update color based on strength
            if (strength < 40) {
                strengthBar.style.backgroundColor = '#dc3545'; // Red
            } else if (strength < 70) {
                strengthBar.style.backgroundColor = '#fd7e14'; // Orange
            } else {
                strengthBar.style.backgroundColor = '#28a745'; // Green
            }
        }

        // Password requirements validation
        function validatePasswordRequirements(password) {
            const requirements = {
                'length': password.length >= 8,
                'uppercase': /[A-Z]/.test(password),
                'lowercase': /[a-z]/.test(password),
                'number': /\d/.test(password),
                'special': /[^A-Za-z0-9]/.test(password)
            };

            Object.keys(requirements).forEach(key => {
                const element = document.getElementById(`req-${key}`);
                if (requirements[key]) {
                    element.classList.add('valid');
                } else {
                    element.classList.remove('valid');
                }
            });
        }

        // Password match validation
        function checkPasswordMatch() {
            const password = document.querySelector('input[name="Input.NewPassword"]').value;
            const confirmPassword = document.querySelector('input[name="Input.ConfirmPassword"]').value;
            const confirmField = document.querySelector('input[name="Input.ConfirmPassword"]');
            const feedback = document.getElementById('confirm-password-feedback');

            if (password && confirmPassword) {
                if (password !== confirmPassword) {
                    confirmField.classList.add('is-invalid');
                    feedback.style.display = 'block';
                } else {
                    confirmField.classList.remove('is-invalid');
                    confirmField.classList.add('is-valid');
                    feedback.style.display = 'none';
                }
            }
        }

        // Real-time validation on input
        document.querySelectorAll('.form-control').forEach(input => {
            input.addEventListener('input', function() {
                if (this.checkValidity()) {
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                } else {
                    this.classList.remove('is-valid');
                    this.classList.add('is-invalid');
                }

                // Special handling for confirm password
                if (this.name === "Input.ConfirmPassword") {
                    checkPasswordMatch();
                }
            });
        });
    </script>
}