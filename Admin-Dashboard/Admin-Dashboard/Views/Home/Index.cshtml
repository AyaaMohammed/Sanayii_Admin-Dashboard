@model Admin_Dashboard.Models.DashboardViewModel
@{
    ViewData["Title"] = "Admin Dashboard";
}

<style>
    .text-gradient {
        background: linear-gradient(90deg, #4e73df 0%, #224abe 100%);
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .card {
        border-radius: 0.75rem;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s;
        border: none;
    }

        .card:hover {
            transform: translateY(-4px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        }

    .icon-shape {
        width: 3rem;
        height: 3rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chart-container {
        position: relative;
        width: 100%;
        height: 400px;
    }

    .no-data-placeholder {
        height: 300px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .table th {
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.5px;
        color: #6c757d;
    }

   
</style>

<div class="container-fluid">
    <div class="text-center mb-5">
        <h2 class="fw-bold text-gradient mt-5">Admin Dashboard</h2>
        <p class="lead text-muted">Comprehensive overview of platform activities</p>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">@Model.ErrorMessage</div>
    }

    <!-- Statistics Cards -->
    <div class="row g-3 mb-4">
        <div class="col-6 col-sm-4 col-lg-2">
            <div class="card shadow-sm h-100 border-start border-primary border-4">
                <div class="card-body text-center">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-2">Admins</h6>
                            <h3 class="mb-0 text-primary">@Model.TotalAdmins</h3>
                        </div>
                        <div class="icon-shape bg-primary bg-opacity-10 rounded-3 p-3">
                            <i class="bi bi-people-fill text-primary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-6 col-sm-4 col-lg-2">
            <div class="card shadow-sm h-100 border-start border-success border-4">
                <div class="card-body text-center">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-2">Customers</h6>
                            <h3 class="mb-0 text-success">@Model.TotalCustomers</h3>
                        </div>
                        <div class="icon-shape bg-success bg-opacity-10 rounded-3 p-3">
                            <i class="bi bi-person-badge text-success"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-6 col-sm-4 col-lg-2">
            <div class="card shadow-sm h-100 border-start border-warning border-4">
                <div class="card-body text-center">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-2">Artisans</h6>
                            <h3 class="mb-0 text-warning">@Model.TotalArtisans</h3>
                        </div>
                        <div class="icon-shape bg-warning bg-opacity-10 rounded-3 p-3">
                            <i class="bi bi-tools text-warning"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-6 col-sm-6 col-lg-3">
            <div class="card shadow-sm h-100 border-start border-info border-4">
                <div class="card-body text-center">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-2">Categories</h6>
                            <h3 class="mb-0 text-info">@Model.TotalServiceCategories</h3>
                        </div>
                        <div class="icon-shape bg-info bg-opacity-10 rounded-3 p-3">
                            <i class="bi bi-collection text-info"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-6 col-sm-6 col-lg-3">
            <div class="card shadow-sm h-100 border-start border-danger border-4">
                <div class="card-body text-center">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-uppercase text-muted mb-2">Requests</h6>
                            <h3 class="mb-0 text-danger">@Model.TotalServicesRequests</h3>
                        </div>
                        <div class="icon-shape bg-danger bg-opacity-10 rounded-3 p-3">
                            <i class="bi bi-cart-check text-danger"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Chart Section -->
    <div class="row g-3 mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-white border-bottom-0 pb-0">
                    <h5 class="card-title">Monthly Orders Overview</h5>
                    <p class="text-muted mb-0">Service requests for the last 30 days</p>
                </div>
                <div class="card-body pt-0">
                    @if (Model.ChartData?.Values.Sum() > 0)
                    {
                        <div class="chart-container">
                            <canvas id="ordersChart"></canvas>
                        </div>
                    }
                    else
                    {
                        <div class="no-data-placeholder">
                            <i class="bi bi-bar-chart" style="font-size: 3rem; color: #dee2e6;"></i>
                            <p class="text-muted mt-3">No order data available for the selected period</p>
                            <small class="text-muted">Last checked: @DateTime.Now.ToString("MMM dd, yyyy HH:mm")</small>
                            <button class="btn btn-sm btn-primary mt-2" onclick="location.reload()">
                                <i class="bi bi-arrow-repeat"></i> Refresh Data
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Orders Table -->
    <div class="row g-3">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-white border-bottom-0 pb-0">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title">Recent Service Requests</h5>
                        <a href="#" class="btn btn-sm btn-outline-primary">View All</a>
                    </div>
                </div>
                <div class="card-body">
                    @if (Model.RecentOrders?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Service</th>
                                        <th>Customer</th>
                                        <th>Date</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in Model.RecentOrders)
                                    {
                                        <tr>
                                            <td>#@order.Id</td>
                                            <td>@order.ServiceName</td>
                                            <td>@order.CustomerName</td>
                                            <td>@order.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(order.Status) rounded-pill">
                                                    @order.Status
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">No recent service requests found</div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(string status)
    {
        switch (status.ToLower())
        {
            case "pending":
                return "bg-warning text-dark";
            case "completed":
                return "bg-success";
            case "cancelled":
                return "bg-danger";
            case "inprogress":
                return "bg-info";
            default:
                return "bg-secondary";
        }
    }
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
        @if (Model.ChartData?.Values.Sum() > 0)
        {
            <text>
                        const ctx = document.getElementById('ordersChart').getContext('2d');
                        const chart = new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels: @Html.Raw(Json.Serialize(Model.ChartData.Labels)),
                                datasets: [{
                                    label: 'Service Requests',
                                    data: @Html.Raw(Json.Serialize(Model.ChartData.Values)),
                                    backgroundColor: function (context) {
                                        const value = context.raw;
                                        return value > 0 ? 'rgba(78, 115, 223, 0.7)' : 'rgba(200, 200, 200, 0.5)';
                                    },
                                    borderColor: 'rgba(78, 115, 223, 1)',
                                    borderWidth: 1,
                                    borderRadius: 4
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: { display: false },
                                    tooltip: {
                                        callbacks: {
                                            label: function (context) {
                                                return context.parsed.y + ' requests';
                                            }
                                        }
                                    }
                                },
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        ticks: { precision: 0, stepSize: 1 },
                                        grid: { drawBorder: false }
                                    },
                                    x: {
                                        grid: { display: false },
                                        ticks: { autoSkip: true, maxTicksLimit: 15 }
                                    }
                                }
                            }
                        });
            </text>
        }
        });
    </script>
}
